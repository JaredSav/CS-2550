1. 
SELECT last_name, first_name
FROM instructor
MINUS
SELECT i.last_name, i.first_name
FROM instructor i JOIN section s
ON i.instructor_id = s.instructor_id
JOIN grade_type_weight gtw
ON s.section_id = gtw.section_id
WHERE gtw.grade_type_code = 'PJ'
ORDER BY last_name;

2.
SELECT COUNT(*) AS "BELOW AVERAGE"
FROM grade
WHERE grade_type_code = 'FI'
AND section_id = 86
AND numeric_grade < 
        (SELECT AVG(numeric_grade)
        FROM grade
        WHERE grade_type_code = 'FI'
        AND section_id = 86);

3.
SELECT z.city, z.state
FROM zipcode z JOIN student s
ON z.zip = s.zip
JOIN enrollment e
ON s.student_id = e.student_id
GROUP BY z.city, z.state
HAVING COUNT(*) =
    (SELECT MAX(num)
    FROM 
        (SELECT COUNT(*) num
        FROM zipcode z JOIN student s
        ON z.zip = s.zip
        JOIN enrollment e
        ON s.student_id = e.student_id
        GROUP BY z.city));

4.
SELECT s.student_id, s.first_name, s.last_name, g.numeric_grade
FROM grade g JOIN enrollment e
ON g.student_id = e.student_id
AND g.section_id = e.section_id
JOIN student s 
ON e.student_id = s.student_id
WHERE g.grade_type_code = 'FI'
AND g.section_id = 81
AND s.student_id =
        (SELECT student_id
        FROM grade
        WHERE grade_type_code = 'FI'
        AND section_id = 81
        AND numeric_grade = 
              (SELECT MIN(numeric_grade)
              FROM grade
              WHERE grade_type_code = 'FI'
              AND section_id = 81));

5.
SELECT student_id, last_name, first_name
FROM student
WHERE student_id IN
    (SELECT DISTINCT e.student_id
    FROM enrollment e JOIN section s
    ON e.section_id = s.section_id
    GROUP BY e.student_id, s.course_no
    HAVING COUNT(*) > 1)
ORDER BY last_name, first_name;

6.
SELECT first_name, last_name
FROM student
WHERE student_id IN
  (SELECT DISTINCT e.student_id
  FROM enrollment e JOIN section s  
  ON e.section_id = s.section_id
  WHERE s.course_no BETWEEN 200 and 299
  GROUP BY e.student_id
  HAVING COUNT(*) =
     (SELECT MIN(NUM)
     FROM
        (SELECT DISTINCT e.student_id, COUNT(*) num
        FROM enrollment e JOIN section s  
        ON e.section_id = s.section_id
        WHERE s.course_no BETWEEN 200 and 299
        GROUP BY e.student_id)))
ORDER BY last_name;

7.
SELECT s.course_no, c.description
FROM enrollment e JOIN section s
ON e.section_id = s.section_id
JOIN course c
ON s.course_no = c.course_no
GROUP BY s.course_no, c.description
HAVING COUNT(*) =      
    (SELECT MAX(num)
    FROM 
        (SELECT COUNT(*) num, s.course_no
        FROM enrollment e JOIN section s
        ON e.section_id = s.section_id
        GROUP BY s.course_no));

8.
SELECT DISTINCT stu.first_name, stu.last_name
FROM section s JOIN enrollment e
ON s.section_id = e.section_id
JOIN student stu
ON e.student_id = stu.student_id
WHERE s.course_no IN
        (SELECT course_no
        FROM section
        WHERE To_Char(start_date_time, 'HH:MI') = '10:30')
ORDER BY stu.last_name;

9.
SELECT s.first_name, s.last_name
FROM grade g JOIN enrollment e
ON g.student_id = e.student_id
AND g.section_id = e.section_id
JOIN student s 
ON e.student_id = s.student_id
WHERE g.grade_type_code = 'FI'
AND g.section_id = 87
AND s.student_id IN
        (SELECT student_id
        FROM grade
        WHERE grade_type_code = 'FI'
        AND section_id = 87
        AND numeric_grade < 
              (SELECT AVG(numeric_grade)
              FROM grade
              WHERE grade_type_code = 'FI'
              AND section_id = 87))
ORDER BY s.last_name;

10.
SELECT DISTINCT stu.first_name, stu.last_name, stu.phone
FROM section s JOIN enrollment e
ON s.section_id = e.section_id
JOIN student stu
ON e.student_id = stu.student_id
WHERE s.course_no IN
    (SELECT course_no
    FROM course 
    WHERE description = 'Intro to SQL'
    OR description = 'Oracle Tools'
    OR description = 'PL/SQL Programming'
    OR description = 'Database Design'
    OR description = 'Database System Principles'
    OR description = 'DB Programming with Java')
ORDER BY stu.last_name, stu.first_name;